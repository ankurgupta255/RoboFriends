{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","props","react_default","a","createElement","reactjs_popup_es","trigger","className","alt","src","concat","id","name","email","modal","close","onClick","website","username","phone","console","log","CardList","_ref","robots","cardComponent","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","response","json","users","_this3","filteredrobots","filter","toLowerCase","includes","length","components_SearchBox","components_scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0259fcfc.chunk.js","sourcesContent":["import React from 'react';\r\nimport Popup from 'reactjs-popup';\r\n// import './Card.css';\r\n// import Popup1 from '../components/Popup';\r\n\r\nconst Card= (props) =>{\r\n\t// const {name,email,id}=props;\r\n\treturn(\r\n\t\t<Popup trigger={<div className='tc bg-light-green dib br2 pa1 ma2 grow bw2 shadow-5 t'>\r\n\t\t<img alt='robots' src={`https://robohash.org/${props.id}?100X100`}/>\r\n\t\t<div>\r\n\t\t<h2>{props.name}</h2>\r\n\t\t<p>{props.email}</p>\r\n\t\t</div>\r\n\t\t</div>} modal>\r\n    {close => (\r\n      <div className=\"tc bg-light-blue br2 pa1 ma2 grow bw2 shadow-5 t\">\r\n        <a className=\"close\" onClick={close}>\r\n          &times;\r\n        </a>\r\n        <div className=\"tc bg-light-red  br2 pa1 ma2 grow bw2 shadow-5 t\"><h2>{props.name}</h2></div>\r\n        <div className=\"content\">\r\n          {' '}\r\n        <h3>Website: {props.website}<br /> <br />\r\n    \tUsername: {props.username}<br /><br />\r\n    \tPhone Number: {props.phone}</h3><br /><br />\r\n        </div>\r\n        <div className=\"actions\">\r\n          <button\r\n            className=\"tc bg-light-orange dib br2 pa1 ma2 grow bw2 shadow-5 t\"\r\n            onClick={() => {\r\n              console.log('modal closed ')\r\n              close()\r\n            }}\r\n          >\r\n            Close\r\n          </button>\r\n        </div>\r\n      </div>\r\n    )}\r\n  </Popup>\r\n\t\t);\r\n}\r\n\r\nexport default Card;\r\n","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({robots}) => {\r\n\tconst cardComponent = robots.map((user, i) => {\r\n\t\treturn <Card \r\n\t\tkey={i} \r\n\t\tid={robots[i].id} \r\n\t\tname={robots[i].name} \r\n\t\temail={robots[i].email}\r\n\t\twebsite={robots[i].website}\r\n\t\tusername={robots[i].username}\r\n\t\tphone={robots[i].phone}\r\n\t\t/>\r\n\t})\r\n\treturn(<div>{cardComponent}</div>);\r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox =({searchfield, searchChange}) =>{\r\n\treturn(\r\n\t\t<div className='tc pa2'>\r\n\t\t<input \r\n\t\tclassName='pa3 ba b--green bg-lightest-blue'\r\n\t\ttype='search' \r\n\t\tplaceholder='search robots' \r\n\t\tonChange={searchChange}\r\n\t\t/>\r\n\t\t</div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll=(props)=>{\r\n\treturn(\r\n\t\t<div style={{ overflowY: 'scroll', border: '5px solid black', height: '500px'}}>\r\n\t\t{props.children}\r\n\t\t</div>\r\n\t\t);\r\n};\r\n\r\nexport default Scroll;","import React, {Component} from 'react';\r\nimport CardList from '../components/CardList';\r\n// import {robots} from './robots';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/scroll';\r\n// import ErrorBoundary from '../components/ErrorBoundary';\r\nimport './App.css';\r\n// import {connect} from 'react-redux';\r\n\r\nclass App extends Component{\r\n\tconstructor(){\r\n\t\tsuper()\r\n\t\tthis.state={\r\n\t\trobots: [],\r\n\t\tsearchfield: ''\r\n\t\t}\r\n\t}\r\n\tcomponentDidMount(){\r\n\t\t// console.log(this.props.store.getState())\r\n\t\tfetch('https://jsonplaceholder.typicode.com/users')\r\n\t\t.then(response=>response.json())\r\n\t\t.then(users=>this.setState({robots: users}))\r\n\t\t}\r\n\t\t\r\n\t\t// .then(users=>{\r\n\t\t// \tthis.setState({robots: users})\r\n\t\t// });\r\n\t\t// this.setState({robots: robots});\r\n\r\n\tonSearchChange=(event)=>{\r\n\t\t// console.log(event.target.value);\r\n\t\tthis.setState({searchfield: event.target.value})\r\n\t\t\r\n\t\t// console.log(filteredrobots);\r\n\t}\r\n\t\r\n\trender() {\r\n\t\t\tconst filteredrobots=this.state.robots.filter(robots=>{\r\n\t\t\treturn robots.name.toLowerCase().includes(this.state.searchfield.toLowerCase());\r\n\t\t})\r\n\t\t\tif(this.state.robots.length===0){\r\n\t\t\treturn <h1>Loading</h1>\r\n\t\t}\r\n\t\telse{\r\n\t\t\treturn(\r\n\t\t<div className='tc'>\r\n\t\t<h1>RoboFriends</h1>\r\n\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t<Scroll>\r\n\t\t<CardList robots={filteredrobots}/>\r\n\t\t</Scroll>\r\n\t\t</div>\r\n\t\t);\r\n\t\t}\r\n\t}\r\n}\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n// import {Provider} from 'react-redux';\n// import {createStore} from 'redux';\n// import {createLogger} from 'redux-logger';\n// import Card from './Card';\n// import Hello from './Hello.js';\nimport App from './containers/App.js';\nimport * as serviceWorker from './serviceWorker';\n// import {searchRobots} from './reducers';\nimport 'tachyons';\n// import {robots} from './robots';\n// const logger=createLogger();\n// const store=createStore(searchRobots);\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\n"],"sourceRoot":""}